{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\waves\\\\client\\\\src\\\\components\\\\dashboard\\\\admin\\\\products\\\\addedit\\\\upload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { getTokenCookie } from 'utils/tools';\nimport Loader from 'utils/loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PicUpload = _ref => {\n  _s();\n\n  let {\n    picValue\n  } = _ref;\n  const [loading, setLoading] = useState(false);\n  const formikImg = useFormik({\n    initialValues: {\n      pic: ''\n    },\n    validationSchema: Yup.object({\n      pic: Yup.mixed().required('A file is required')\n    }),\n    onSubmit: values => {\n      setLoading(true);\n      let formData = new FormData();\n      formData.append(\"file\", values.pic);\n      axios.post(`/api/products/upload`, formData, {\n        headers: {\n          'content-type': 'multipart/form-data',\n          'Authorization': `Bearer ${getTokenCookie()}`\n        }\n      }).then(response => {\n        console.log(response.data);\n        picValue(response.data);\n      }).catch(error => {\n        alert(error);\n      }).finally(() => {\n        setLoading(false);\n      });\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: formikImg.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"file\",\n          id: \"file\",\n          name: \"file\",\n          onChange: event => {\n            formikImg.setFieldValue(\"pic\", event.target.files[0]);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this), formikImg.errors.pic && formikImg.touched.pic ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 29\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(PicUpload, \"qEbYO7ulqfMVKhUBTCMSp4T8lu8=\", false, function () {\n  return [useFormik];\n});\n\n_c = PicUpload;\nexport default PicUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"PicUpload\");","map":{"version":3,"sources":["C:/React/waves/client/src/components/dashboard/admin/products/addedit/upload.js"],"names":["React","useState","Button","Form","useFormik","Yup","axios","getTokenCookie","Loader","PicUpload","picValue","loading","setLoading","formikImg","initialValues","pic","validationSchema","object","mixed","required","onSubmit","values","formData","FormData","append","post","headers","then","response","console","log","data","catch","error","alert","finally","handleSubmit","event","setFieldValue","target","files","errors","touched"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,iBAA7B;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,OAAQC,MAAR,MAAoB,cAApB;;;;AAEA,MAAMC,SAAS,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAChC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAMY,SAAS,GAAGT,SAAS,CAAC;AACxBU,IAAAA,aAAa,EAAE;AAAEC,MAAAA,GAAG,EAAE;AAAP,KADS;AAExBC,IAAAA,gBAAgB,EAAEX,GAAG,CAACY,MAAJ,CAAW;AACzBF,MAAAA,GAAG,EAAEV,GAAG,CAACa,KAAJ,GAAYC,QAAZ,CAAqB,oBAArB;AADoB,KAAX,CAFM;AAKxBC,IAAAA,QAAQ,EAAGC,MAAD,IAAY;AAClBT,MAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,UAAIU,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,MAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBH,MAAM,CAACN,GAA/B;AACAT,MAAAA,KAAK,CAACmB,IAAN,CAAY,sBAAZ,EAAmCH,QAAnC,EAA6C;AACzCI,QAAAA,OAAO,EAAE;AACL,0BAAgB,qBADX;AAEL,2BAAkB,UAASnB,cAAc,EAAG;AAFvC;AADgC,OAA7C,EAKGoB,IALH,CAKSC,QAAQ,IAAI;AACjBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACArB,QAAAA,QAAQ,CAACkB,QAAQ,CAACG,IAAV,CAAR;AACH,OARD,EAQGC,KARH,CAQUC,KAAK,IAAI;AACfC,QAAAA,KAAK,CAACD,KAAD,CAAL;AACH,OAVD,EAUGE,OAVH,CAUW,MAAM;AACbvB,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OAZD;AAaH;AAvBuB,GAAD,CAA3B;AA0BA,sBACI;AAAA,cACMD,OAAO,gBACL,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADK,gBAGL,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAEE,SAAS,CAACuB,YAA1B;AAAA,8BACI,QAAC,IAAD,CAAM,KAAN;AAAA,gCACI,QAAC,IAAD,CAAM,OAAN;AACI,UAAA,IAAI,EAAC,MADT;AAEI,UAAA,EAAE,EAAC,MAFP;AAGI,UAAA,IAAI,EAAC,MAHT;AAII,UAAA,QAAQ,EAAGC,KAAD,IAAW;AACjBxB,YAAAA,SAAS,CAACyB,aAAV,CAAwB,KAAxB,EAA+BD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAA/B;AACH;AANL;AAAA;AAAA;AAAA;AAAA,gBADJ,EASM3B,SAAS,CAAC4B,MAAV,CAAiB1B,GAAjB,IAAwBF,SAAS,CAAC6B,OAAV,CAAkB3B,GAA1C,gBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,GAEI,IAXV;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAgBI,QAAC,MAAD;AACI,QAAA,OAAO,EAAC,WADZ;AAEI,QAAA,IAAI,EAAC,QAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAJR,mBADJ;AAgCH,CA7DD;;GAAMN,S;UAGgBL,S;;;KAHhBK,S;AA+DN,eAAeA,SAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Form } from 'react-bootstrap';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\nimport { getTokenCookie } from 'utils/tools';\r\nimport  Loader from 'utils/loader';\r\n\r\nconst PicUpload = ({ picValue }) => {\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const formikImg = useFormik({\r\n        initialValues: { pic: '' },\r\n        validationSchema: Yup.object({\r\n            pic: Yup.mixed().required('A file is required')\r\n        }),\r\n        onSubmit: (values) => {\r\n            setLoading(true);\r\n            \r\n            let formData = new FormData();\r\n            formData.append(\"file\", values.pic);\r\n            axios.post(`/api/products/upload`, formData, {\r\n                headers: {\r\n                    'content-type': 'multipart/form-data',\r\n                    'Authorization': `Bearer ${getTokenCookie()}`\r\n                }\r\n            }).then( response => {\r\n                console.log(response.data);\r\n                picValue(response.data);\r\n            }).catch( error => {\r\n                alert(error)\r\n            }).finally(() => {\r\n                setLoading(false);\r\n            })\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n            { loading ?\r\n                <Loader />\r\n                :\r\n                <Form onSubmit={formikImg.handleSubmit}>\r\n                    <Form.Group>\r\n                        <Form.Control\r\n                            type='file' \r\n                            id='file'\r\n                            name='file'\r\n                            onChange={(event) => {\r\n                                formikImg.setFieldValue(\"pic\", event.target.files[0])\r\n                            }}\r\n                        />\r\n                        { formikImg.errors.pic && formikImg.touched.pic ?\r\n                            <div>Error</div>\r\n                            : null\r\n                        }\r\n\r\n                    </Form.Group>\r\n                    <Button\r\n                        variant='secondary'\r\n                        type='submit'\r\n                    >\r\n                        Upload\r\n                    </Button>\r\n                </Form>\r\n        \r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default PicUpload;"]},"metadata":{},"sourceType":"module"}