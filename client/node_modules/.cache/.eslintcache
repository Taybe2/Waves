[{"C:\\React\\waves\\client\\src\\index.js":"1","C:\\React\\waves\\client\\src\\routes.js":"2","C:\\React\\waves\\client\\src\\components\\navigation\\footer.js":"3","C:\\React\\waves\\client\\src\\components\\home\\index.js":"4","C:\\React\\waves\\client\\src\\components\\navigation\\header.js":"5","C:\\React\\waves\\client\\src\\store\\index.js":"6","C:\\React\\waves\\client\\src\\store\\reducers\\index.js":"7","C:\\React\\waves\\client\\src\\store\\reducers\\users.reducer.js":"8","C:\\React\\waves\\client\\src\\components\\home\\featured.js":"9","C:\\React\\waves\\client\\src\\utils\\carousel.js":"10","C:\\React\\waves\\client\\src\\utils\\tools.js":"11","C:\\React\\waves\\client\\src\\utils\\promotions\\slim.block.js":"12","C:\\React\\waves\\client\\src\\store\\actions\\index.js":"13","C:\\React\\waves\\client\\src\\store\\types.js":"14","C:\\React\\waves\\client\\src\\store\\reducers\\products.reducer.js":"15","C:\\React\\waves\\client\\src\\store\\actions\\product.actions.js":"16","C:\\React\\waves\\client\\src\\utils\\products\\cardBlocks.js":"17","C:\\React\\waves\\client\\src\\utils\\products\\card.js":"18","C:\\React\\waves\\client\\src\\utils\\loader.js":"19","C:\\React\\waves\\client\\src\\components\\hoc\\mainLayout.js":"20","C:\\React\\waves\\client\\src\\store\\reducers\\notifications.reducer.js":"21","C:\\React\\waves\\client\\src\\components\\auth\\index.js":"22","C:\\React\\waves\\client\\src\\components\\auth\\authForm.js":"23","C:\\React\\waves\\client\\src\\store\\actions\\user.actions.js":"24","C:\\React\\waves\\client\\src\\components\\dashboard\\index.js":"25","C:\\React\\waves\\client\\src\\components\\hoc\\dashboardLayout.js":"26","C:\\React\\waves\\client\\src\\components\\hoc\\authGuard.js":"27","C:\\React\\waves\\client\\src\\components\\hoc\\authGuardNew.js":"28","C:\\React\\waves\\client\\src\\components\\hoc\\preventSignIn.js":"29","C:\\React\\waves\\client\\src\\components\\dashboard\\user\\info.js":"30","C:\\React\\waves\\client\\src\\components\\dashboard\\user\\stepper.js":"31","C:\\React\\waves\\client\\src\\components\\dashboard\\admin\\products\\index.js":"32","C:\\React\\waves\\client\\src\\components\\dashboard\\admin\\products\\productsTable.js":"33","C:\\React\\waves\\client\\src\\components\\dashboard\\admin\\products\\addedit\\add.js":"34","C:\\React\\waves\\client\\src\\components\\dashboard\\admin\\products\\addedit\\formValues.js":"35","C:\\React\\waves\\client\\src\\store\\reducers\\brands.reducer.js":"36","C:\\React\\waves\\client\\src\\store\\actions\\brand.actions.js":"37","C:\\React\\waves\\client\\src\\components\\dashboard\\admin\\products\\addedit\\upload.js":"38","C:\\React\\waves\\client\\src\\components\\dashboard\\admin\\products\\addedit\\picViewer.js":"39","C:\\React\\waves\\client\\src\\components\\dashboard\\admin\\products\\addedit\\edit.js":"40","C:\\React\\waves\\client\\src\\components\\shop\\index.js":"41","C:\\React\\waves\\client\\src\\utils\\paginateNav.js":"42","C:\\React\\waves\\client\\src\\components\\shop\\searchBar.js":"43","C:\\React\\waves\\client\\src\\components\\shop\\collapseCheckbox.js":"44","C:\\React\\waves\\client\\src\\components\\shop\\rangeSelect.js":"45","C:\\React\\waves\\client\\src\\components\\product\\index.js":"46","C:\\React\\waves\\client\\src\\components\\product\\productInfo.js":"47","C:\\React\\waves\\client\\src\\utils\\cart\\addToCartHandler.js":"48","C:\\React\\waves\\client\\src\\components\\dashboard\\user\\cart.js":"49","C:\\React\\waves\\client\\src\\components\\dashboard\\user\\cartDetail.js":"50","C:\\React\\waves\\client\\src\\utils\\historyBlock.js":"51","C:\\React\\waves\\client\\src\\store\\reducers\\site.reducer.js":"52","C:\\React\\waves\\client\\src\\components\\dashboard\\admin\\site\\index.js":"53","C:\\React\\waves\\client\\src\\components\\dashboard\\admin\\site\\siteVars.js":"54","C:\\React\\waves\\client\\src\\store\\actions\\site.actions.js":"55"},{"size":381,"mtime":1656226758274,"results":"56","hashOfConfig":"57"},{"size":3859,"mtime":1658071327909,"results":"58","hashOfConfig":"57"},{"size":3095,"mtime":1658070311897,"results":"59","hashOfConfig":"57"},{"size":1490,"mtime":1656078420223,"results":"60","hashOfConfig":"57"},{"size":1677,"mtime":1658050000710,"results":"61","hashOfConfig":"57"},{"size":419,"mtime":1655222817022,"results":"62","hashOfConfig":"57"},{"size":398,"mtime":1658050820490,"results":"63","hashOfConfig":"57"},{"size":1515,"mtime":1657693353406,"results":"64","hashOfConfig":"57"},{"size":968,"mtime":1655460794136,"results":"65","hashOfConfig":"57"},{"size":1732,"mtime":1655480587134,"results":"66","hashOfConfig":"57"},{"size":2612,"mtime":1657438572869,"results":"67","hashOfConfig":"57"},{"size":863,"mtime":1655481860364,"results":"68","hashOfConfig":"57"},{"size":2610,"mtime":1658072702348,"results":"69","hashOfConfig":"57"},{"size":1077,"mtime":1658072691608,"results":"70","hashOfConfig":"57"},{"size":930,"mtime":1656924215628,"results":"71","hashOfConfig":"57"},{"size":2990,"mtime":1656922352380,"results":"72","hashOfConfig":"57"},{"size":922,"mtime":1656008588505,"results":"73","hashOfConfig":"57"},{"size":2931,"mtime":1657482725401,"results":"74","hashOfConfig":"57"},{"size":240,"mtime":1656078553831,"results":"75","hashOfConfig":"57"},{"size":1090,"mtime":1656146107788,"results":"76","hashOfConfig":"57"},{"size":610,"mtime":1656782449391,"results":"77","hashOfConfig":"57"},{"size":2152,"mtime":1656396471816,"results":"78","hashOfConfig":"57"},{"size":3471,"mtime":1656224586041,"results":"79","hashOfConfig":"57"},{"size":4727,"mtime":1658051474821,"results":"80","hashOfConfig":"57"},{"size":1122,"mtime":1657962977752,"results":"81","hashOfConfig":"57"},{"size":2007,"mtime":1656311193894,"results":"82","hashOfConfig":"57"},{"size":914,"mtime":1656348220400,"results":"83","hashOfConfig":"57"},{"size":728,"mtime":1656447153786,"results":"84","hashOfConfig":"57"},{"size":434,"mtime":1656396016808,"results":"85","hashOfConfig":"57"},{"size":2720,"mtime":1658071438780,"results":"86","hashOfConfig":"57"},{"size":7504,"mtime":1656702109915,"results":"87","hashOfConfig":"57"},{"size":3797,"mtime":1656832733599,"results":"88","hashOfConfig":"57"},{"size":4141,"mtime":1656780266182,"results":"89","hashOfConfig":"57"},{"size":10505,"mtime":1657014138709,"results":"90","hashOfConfig":"57"},{"size":1583,"mtime":1656920844992,"results":"91","hashOfConfig":"57"},{"size":279,"mtime":1656863322485,"results":"92","hashOfConfig":"57"},{"size":392,"mtime":1656838470299,"results":"93","hashOfConfig":"57"},{"size":2390,"mtime":1657012920876,"results":"94","hashOfConfig":"57"},{"size":2139,"mtime":1657088900359,"results":"95","hashOfConfig":"57"},{"size":10671,"mtime":1657263056518,"results":"96","hashOfConfig":"57"},{"size":5606,"mtime":1657354371367,"results":"97","hashOfConfig":"57"},{"size":1767,"mtime":1657273385457,"results":"98","hashOfConfig":"57"},{"size":1296,"mtime":1657272858625,"results":"99","hashOfConfig":"57"},{"size":2136,"mtime":1657274600147,"results":"100","hashOfConfig":"57"},{"size":3297,"mtime":1657354088262,"results":"101","hashOfConfig":"57"},{"size":3588,"mtime":1657442104842,"results":"102","hashOfConfig":"57"},{"size":3258,"mtime":1657483253954,"results":"103","hashOfConfig":"57"},{"size":1320,"mtime":1657479061667,"results":"104","hashOfConfig":"57"},{"size":4623,"mtime":1657961860258,"results":"105","hashOfConfig":"57"},{"size":1750,"mtime":1657522911695,"results":"106","hashOfConfig":"57"},{"size":1216,"mtime":1658045659458,"results":"107","hashOfConfig":"57"},{"size":532,"mtime":1658073343158,"results":"108","hashOfConfig":"57"},{"size":310,"mtime":1658071292220,"results":"109","hashOfConfig":"57"},{"size":3486,"mtime":1658073402871,"results":"110","hashOfConfig":"57"},{"size":618,"mtime":1658073599808,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},"bemse",{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"115"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"115"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"115"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"115"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"115"},{"filePath":"238","messages":"239","suppressedMessages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"244","messages":"245","suppressedMessages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"247","messages":"248","suppressedMessages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"250","messages":"251","suppressedMessages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"115"},{"filePath":"257","messages":"258","suppressedMessages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"115"},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","suppressedMessages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"270","messages":"271","suppressedMessages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","suppressedMessages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"276","messages":"277","suppressedMessages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","suppressedMessages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"282","messages":"283","suppressedMessages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\React\\waves\\client\\src\\index.js",[],[],["285","286"],"C:\\React\\waves\\client\\src\\routes.js",[],[],"C:\\React\\waves\\client\\src\\components\\navigation\\footer.js",[],[],"C:\\React\\waves\\client\\src\\components\\home\\index.js",[],[],"C:\\React\\waves\\client\\src\\components\\navigation\\header.js",[],[],"C:\\React\\waves\\client\\src\\store\\index.js",[],[],"C:\\React\\waves\\client\\src\\store\\reducers\\index.js",[],[],"C:\\React\\waves\\client\\src\\store\\reducers\\users.reducer.js",[],[],"C:\\React\\waves\\client\\src\\components\\home\\featured.js",[],[],"C:\\React\\waves\\client\\src\\utils\\carousel.js",[],[],"C:\\React\\waves\\client\\src\\utils\\tools.js",[],[],"C:\\React\\waves\\client\\src\\utils\\promotions\\slim.block.js",[],[],"C:\\React\\waves\\client\\src\\store\\actions\\index.js",[],[],"C:\\React\\waves\\client\\src\\store\\types.js",[],[],"C:\\React\\waves\\client\\src\\store\\reducers\\products.reducer.js",[],[],"C:\\React\\waves\\client\\src\\store\\actions\\product.actions.js",["287","288","289","290"],[],"import axios from \"axios\";\r\nimport * as actions from './index';\r\n\r\nimport { getAuthHeader, removeTokenCookie, getTokenCookie } from \"utils/tools\";\r\n\r\naxios.defaults.headers.post['Content-Type'] = 'application-json';\r\n\r\nexport const productsBySort = ({ limit, sortBy, order }) => {\r\n    return async(dispatch) => {\r\n        try {\r\n            const products = await axios.get('api/products/all', {\r\n                params: {\r\n                    limit,\r\n                    sortBy,\r\n                    order\r\n                }\r\n            });\r\n\r\n            switch (sortBy) {\r\n                case 'itemSold':\r\n                    dispatch(actions.productsBySold(products.data));\r\n                    break;\r\n                case 'date':\r\n                    dispatch(actions.productsByDate(products.data));\r\n                    break;\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n        } catch(error) {\r\n            dispatch(actions.errorGlobal('Sorry something happened, try again later'));\r\n        }\r\n    }\r\n}\r\n\r\nexport const productsPaginate = (args) => {\r\n    return async(dispatch) => {\r\n        try {\r\n            const products = await axios.post(`/api/products/paginate/all`, args);\r\n            dispatch(actions.productsPaginate(products.data));\r\n        } catch(error) {\r\n            dispatch(actions.errorGlobal(error.response.data.message));\r\n        }\r\n    }\r\n}\r\n\r\nexport const removeProduct = (id) => {\r\n    return async(dispatch) => {\r\n        try {\r\n            const products = await axios.delete(`/api/products/product/${id}`, getAuthHeader());\r\n            dispatch(actions.removeProduct());\r\n            dispatch(actions.successGlobal('Product removed.'));\r\n        } catch(error) {\r\n            dispatch(actions.errorGlobal(error.response.data.message));\r\n        }\r\n    }\r\n}\r\n\r\nexport const addProduct = (data) => {\r\n    return async(dispatch) => {\r\n        try {\r\n            const product = await axios.post(`/api/products/product`, data, getAuthHeader());\r\n            dispatch(actions.addProduct(product.data));\r\n            dispatch(actions.successGlobal('Product added.'));\r\n        } catch(error) {\r\n            dispatch(actions.errorGlobal(error.response.data.message));\r\n        }\r\n    }\r\n}\r\n\r\nexport const getProductById = (id) => {\r\n    return async(dispatch) => {\r\n        try {\r\n            const product = await axios.get(`/api/products/product/${id}`);\r\n            dispatch(actions.productById(product.data));\r\n        } catch(error) {\r\n            dispatch(actions.errorGlobal(error.response.data.message));\r\n        }\r\n    }\r\n}\r\nexport const editProduct = (values, id) => {\r\n    return async(dispatch) => {\r\n        try {\r\n            const product = await axios.patch(`/api/products/product/${id}`, values, getAuthHeader());\r\n            dispatch(actions.successGlobal('Product updated.'));\r\n        } catch(error) {\r\n            dispatch(actions.errorGlobal(error.response.data.message));\r\n        }\r\n    }\r\n}","C:\\React\\waves\\client\\src\\utils\\products\\cardBlocks.js",[],[],"C:\\React\\waves\\client\\src\\utils\\products\\card.js",[],[],"C:\\React\\waves\\client\\src\\utils\\loader.js",[],[],"C:\\React\\waves\\client\\src\\components\\hoc\\mainLayout.js",[],[],"C:\\React\\waves\\client\\src\\store\\reducers\\notifications.reducer.js",[],[],"C:\\React\\waves\\client\\src\\components\\auth\\index.js",[],[],"C:\\React\\waves\\client\\src\\components\\auth\\authForm.js",[],[],"C:\\React\\waves\\client\\src\\store\\actions\\user.actions.js",[],[],"C:\\React\\waves\\client\\src\\components\\dashboard\\index.js",[],[],"C:\\React\\waves\\client\\src\\components\\hoc\\dashboardLayout.js",[],[],"C:\\React\\waves\\client\\src\\components\\hoc\\authGuard.js",[],[],"C:\\React\\waves\\client\\src\\components\\hoc\\authGuardNew.js",[],[],"C:\\React\\waves\\client\\src\\components\\hoc\\preventSignIn.js",[],[],"C:\\React\\waves\\client\\src\\components\\dashboard\\user\\info.js",[],[],"C:\\React\\waves\\client\\src\\components\\dashboard\\user\\stepper.js",["291"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { userChangeEmail } from 'store/actions/user.actions';\r\n\r\nimport { errorHelper } from 'utils/tools';\r\nimport Loader from 'utils/loader';\r\n\r\nimport { Modal } from 'react-bootstrap';\r\n\r\nimport {\r\n    TextField,\r\n    Button,\r\n    Stepper,\r\n    Step,\r\n    StepLabel\r\n} from '@mui/material';\r\nimport usersReducer from 'store/reducers/users.reducer';\r\n\r\nconst EmailStepper = ({ users }) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [emailModal, setEmailModal] = useState(false);\r\n    const notifications = useSelector(state => state.notifications);\r\n    const dispatch = useDispatch();\r\n\r\n    const [activeStep, setActiveStep] = useState(0);\r\n    const steps = ['Enter old email', 'Enter new email', 'Are you sure?'];\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {email: '', newemail: ''},\r\n        validationSchema: Yup.object({\r\n            email: Yup.string()\r\n                .required('This is required')\r\n                .email('This is not a valid email')\r\n                .test('match', 'Please check your email', (email) => {\r\n                    return email === users.data.email\r\n                }),\r\n            newemail: Yup.string()\r\n                .required('This is required')\r\n                .email('This is not a valid email')\r\n                .test('match', 'Please check your email', (newemail) => {\r\n                    return newemail !== users.data.email\r\n                })\r\n        }),\r\n        onSubmit: (values) => {\r\n            console.log(values);\r\n            setLoading(true);\r\n            dispatch(userChangeEmail(values));\r\n        }\r\n    });\r\n\r\n    const closeModal = () => setEmailModal(false);\r\n    const openModal  = () => setEmailModal(true);\r\n\r\n    const handleNext = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1)\r\n    }\r\n\r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1)\r\n    }\r\n\r\n    const nextBtn = () => (\r\n        <Button className='mt-3' variant='contained' color='primary' onClick={handleNext}>\r\n            Next\r\n        </Button>\r\n    )\r\n    const backBtn = () => (\r\n        <Button className=\"mt-3\" sx={{ mr:1 }} variant='outlined' onClick={handleBack}>\r\n            Back\r\n        </Button>\r\n    )\r\n\r\n    useEffect(() => {\r\n        if(notifications && notifications.success) {\r\n            closeModal();\r\n            setLoading(false);\r\n        }\r\n    }, [notifications])\r\n\r\n    return (\r\n        <>\r\n            <form className='mt-3 article_form' style={{maxWidth: '250px'}}>\r\n                <div className='form-group'>\r\n                    <TextField \r\n                        style={{ width: '100%' }}\r\n                        name=\"emailstatic\"\r\n                        label='Email'\r\n                        value={users.data.email}\r\n                        variant='outlined'\r\n                        disabled\r\n                    />\r\n                </div>\r\n                <Button\r\n                    className='mb-3'\r\n                    variant='contained'\r\n                    color='primary'\r\n                    onClick={openModal}\r\n                >\r\n                    Edit email\r\n                </Button>\r\n            </form>\r\n            <Modal size=\"lg\" centered show={emailModal} onHide={closeModal}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Update your email</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div className='form-group'>\r\n                        <Stepper activeStep={activeStep}>\r\n                            { steps.map((label, index) => {\r\n                                return (\r\n                                    <Step key={index}>\r\n                                        <StepLabel>{label}</StepLabel>\r\n                                    </Step>\r\n                                );\r\n                            })}\r\n                        </Stepper>\r\n                    </div>\r\n                    <form className='mt-3 stepper_form' onSubmit={formik.handleSubmit}>\r\n                        { activeStep === 0 ?\r\n                            <div className='form-group'>\r\n                                <TextField\r\n                                    style={{ width: '100%' }}\r\n                                    name=\"emailstatic\"\r\n                                    label='Enter your current email'\r\n                                    variant='outlined'\r\n                                    {...formik.getFieldProps('email')}\r\n                                    {...errorHelper(formik, 'email')}\r\n                                />\r\n                                { formik.values.email && !formik.errors.email ?\r\n                                        nextBtn()\r\n                                    : \r\n                                        null\r\n                                }\r\n                            </div>\r\n                            \r\n                            :\r\n                            null\r\n                        }\r\n                        { activeStep === 1 ?\r\n                            <div className='form-group'>\r\n                                <TextField\r\n                                    style={{ width: '100%' }}\r\n                                    name=\"emailstatic\"\r\n                                    label='Enter your new email'\r\n                                    variant='outlined'\r\n                                    {...formik.getFieldProps('newemail')}\r\n                                    {...errorHelper(formik, 'newemail')}\r\n                                />\r\n                                {\r\n                                    backBtn()\r\n                                }\r\n                                { formik.values.newemail && !formik.errors.newemail ?\r\n                                        nextBtn()\r\n                                    : \r\n                                        null\r\n                                }\r\n                            </div>\r\n                            \r\n                            :\r\n                            null\r\n                        }\r\n                        { activeStep === 2 ?\r\n                            <div className='form-group'>\r\n                                { loading ?\r\n                                    <Loader />\r\n                                    :\r\n                                    <>\r\n                                        <p>Are you sure you want to update your email?</p>\r\n                                        { backBtn() }\r\n                                        <Button\r\n                                            className='mt-3'\r\n                                            variant='contained'\r\n                                            color='primary'\r\n                                            onClick={formik.submitForm}\r\n                                        >Edit email</Button>\r\n                                    </>\r\n                                }\r\n                            </div>\r\n                            :\r\n                            null\r\n                        }\r\n                    </form>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default EmailStepper;","C:\\React\\waves\\client\\src\\components\\dashboard\\admin\\products\\index.js",["292"],[],"import React, { useEffect, useReducer, useState } from 'react';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport DashboardLayout from 'components/hoc/dashboardLayout';\r\nimport ProductsTable from './productsTable';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { errorHelper } from 'utils/tools';\r\nimport { TextField } from '@mui/material';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { productsPaginate, removeProduct } from 'store/actions/product.actions';\r\n\r\nconst defaultValues = { keywords: '', brand: [], min: 0, max: 5000, frets: [], page: 1 };\r\n\r\nconst AdminProducts = (props) => {\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [toRemove, setToRemove] = useState(null);\r\n\r\n    const products = useSelector(state => state.products);\r\n    const notifications = useSelector(state => state.notifications);\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const formik = useFormik({\r\n        initialValues: { keywords: '' },\r\n        validationSchema: Yup.object({\r\n            keywords: Yup.string()\r\n                .min(3, 'You need more than 3 characters')\r\n                .max(200, 'Your search is too long')\r\n        }),\r\n        onSubmit: (values, { resetForm }) => {\r\n            setSearchValues({ keywords: values.keywords, page: 1});\r\n            resetForm();\r\n        }\r\n    })\r\n\r\n    const [searchValues, setSearchValues] = useReducer(\r\n        (state, newState) => ({ ...state, ...newState }),\r\n        defaultValues \r\n    )\r\n    \r\n    const goToEdit = (id) => {\r\n        navigate(`/dashboard/admin/edit_product/${id}`);\r\n    }\r\n\r\n    const goToPage = (page) => {\r\n        setSearchValues({ page: page });\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setShowModal(false);\r\n    }\r\n\r\n    const handleOpen = (id) => {\r\n        setToRemove(id);\r\n        setShowModal(true);\r\n    }\r\n\r\n    const handleRemove = () => {\r\n        dispatch(removeProduct(toRemove));\r\n    }\r\n\r\n    const resetSearch = () => {\r\n        setSearchValues(defaultValues)\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(productsPaginate(searchValues));\r\n    }, [dispatch, searchValues]);\r\n\r\n    useEffect(() => {\r\n        handleClose();\r\n        setToRemove(null);\r\n\r\n        if(notifications && notifications.removed) {\r\n            dispatch(productsPaginate(searchValues));\r\n        }\r\n\r\n    }, [notifications, dispatch])\r\n\r\n    return(\r\n        <DashboardLayout title=\"Products\">\r\n            <div className='products_table'>\r\n                <div>\r\n                    <form className='mt-3' onSubmit={formik.handleSubmit}>\r\n                        <TextField\r\n                            style={{width: '100%'}}\r\n                            name='keywordds'\r\n                            label='Enter your search'\r\n                            variant='outlined'\r\n                            {...formik.getFieldProps('keywords')}\r\n                            {...errorHelper(formik, 'keywords')}\r\n                        />\r\n                    </form>\r\n                    <Button onClick={() => resetSearch()}>Reset Search</Button>\r\n                </div>\r\n                <hr />\r\n                <ProductsTable\r\n                    showModal={showModal}\r\n                    prods={products.byPaginate}\r\n                    prevPage={(page) => goToPage(page)}\r\n                    nextPage={(page) => goToPage(page)}\r\n                    editProd={(id) => goToEdit(id)}\r\n                    closeModal={() => handleClose()}\r\n                    openModal={(id) => handleOpen(id)}\r\n                    removeProd={() => handleRemove()}\r\n                />\r\n            </div>\r\n        </DashboardLayout>\r\n    )\r\n}\r\n\r\nexport default AdminProducts;","C:\\React\\waves\\client\\src\\components\\dashboard\\admin\\products\\productsTable.js",[],[],"C:\\React\\waves\\client\\src\\components\\dashboard\\admin\\products\\addedit\\add.js",["293"],[],"import React, { useEffect, useReducer, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { getTokenCookie } from 'utils/tools';\r\nimport PicUpload from './upload';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport DashboardLayout from 'components/hoc/dashboardLayout';\r\nimport { getAllBrands } from 'store/actions/brand.actions';\r\nimport { addProduct } from 'store/actions/product.actions';\r\nimport PicViewer from './picViewer';\r\n//import { clearProductAdded } from 'store/actions';\r\n\r\nimport { useFormik } from 'formik';\r\nimport { errorHelper } from 'utils/tools';\r\nimport Loader from 'utils/loader';\r\nimport { \r\n    TextField,\r\n    Button,\r\n    Divider,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    FormControl,\r\n    FormHelperText\r\n} from '@mui/material';\r\n\r\nimport { validation } from './formValues';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst AddProduct = (props) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const notifications = useSelector(state => state.notifications);\r\n    const brands = useSelector(state => state.brands);\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            model: '',\r\n            brand: '',\r\n            frets: '',\r\n            woodtype: '',\r\n            description: '',\r\n            price: '',\r\n            available: '',\r\n            shipping: false,\r\n            images: []\r\n        },\r\n        validationSchema: validation,\r\n        onSubmit: (values) => {\r\n            handleSubmit(values);\r\n        }\r\n    });\r\n\r\n    const handleSubmit = (values) => {\r\n        setLoading(true);\r\n        dispatch(addProduct(values));\r\n    }\r\n\r\n    const handlePicValue = (pic) => {\r\n        const picArray = formik.values.images;\r\n        const picItem = {id: pic.public_id, url: pic.url};\r\n        picArray.push(picItem);\r\n        formik.setFieldValue('images', picArray);\r\n    }\r\n    console.log(formik.values)\r\n\r\n    const deletePic = (picToDelete) => {\r\n        setLoading(true);\r\n        const picData = {public_id: picToDelete.id};\r\n        axios.post(`/api/products/uploadRemove`, picData, {\r\n            headers: {\r\n                'Authorization': `Bearer ${getTokenCookie()}`\r\n            }\r\n        }).then( response => {\r\n            console.log(response.data);\r\n            //picValue(response.data);\r\n            const picArray = formik.values.images;\r\n            picArray.splice(picToDelete.index, 1);\r\n            formik.setFieldValue('images', picArray);\r\n        }).catch( error => {\r\n            alert(error)\r\n        }).finally(() => {\r\n            setLoading(false);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(notifications && notifications.success) {\r\n            navigate('/dashboard/admin/admin_products');\r\n        }\r\n        if(notifications && notifications.error) {\r\n            setLoading(false);\r\n        }\r\n    }, [notifications, navigate])\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllBrands());\r\n    }, [dispatch])\r\n\r\n    // useEffect(() => {\r\n    //     return() => {\r\n    //         dispatch(clearProductAdded())\r\n    //     }\r\n    // }, [dispatch])\r\n\r\n    return (\r\n        <DashboardLayout title=\"Add Product\">\r\n            { loading ?\r\n                <Loader />\r\n                :\r\n                <>\r\n                    <PicViewer \r\n                        formik={formik}\r\n                        deletePic={(index, id) => deletePic(index, id)}\r\n                    />\r\n                    <PicUpload \r\n                        picValue={(pic) => handlePicValue(pic)}\r\n                    />\r\n                    <form className='mt-3 article_form' onSubmit={formik.handleSubmit}>\r\n                        <div className='form-group'>\r\n                            <TextField\r\n                                style={{width: '100%'}}\r\n                                name='model'\r\n                                label='Enter a model'\r\n                                variant='outlined'\r\n                                {...formik.getFieldProps('model')}\r\n                                {...errorHelper(formik, 'model')}\r\n                            />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <TextField\r\n                                style={{width: '100%'}}\r\n                                name='frets'\r\n                                label='Amount of frets'\r\n                                variant='outlined'\r\n                                {...formik.getFieldProps('frets')}\r\n                                {...errorHelper(formik, 'frets')}\r\n                            />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <TextField\r\n                                style={{width: '100%'}}\r\n                                name='woodtype'\r\n                                label='Enter wood type'\r\n                                variant='outlined'\r\n                                {...formik.getFieldProps('woodtype')}\r\n                                {...errorHelper(formik, 'woodtype')}\r\n                            />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <FormControl>\r\n                                <InputLabel id=\"brand-select-label\">Select a brand</InputLabel>\r\n                                <Select\r\n                                    labelId='brand-select-label'\r\n                                    name='brand'\r\n                                    label='Select a brand'\r\n                                    {...formik.getFieldProps('brand')}\r\n                                    error={ formik.errors.brand && formik.touched.brand ?\r\n                                    true : false }\r\n                                >\r\n                                    <MenuItem value=\"\">\r\n                                        <em>None</em>\r\n                                    </MenuItem>\r\n                                    {brands && brands.all ?\r\n                                        brands.all.map((item) => (\r\n                                            <MenuItem key={item._id} value={item._id}>\r\n                                                {item.name}\r\n                                            </MenuItem>\r\n                                        ))\r\n                                        : null\r\n                                    }\r\n                                </Select>\r\n                                { formik.errors.brand && formik.touched.brand ?\r\n                                    <FormHelperText error={true}>\r\n                                        {formik.errors.brand}\r\n                                    </FormHelperText>\r\n                                    : null\r\n                                }\r\n                            </FormControl>\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <TextField\r\n                                style={{width: '100%'}}\r\n                                name='description'\r\n                                label='Enter description'\r\n                                variant='outlined'\r\n                                multiline\r\n                                rows={4}\r\n                                {...formik.getFieldProps('description')}\r\n                                {...errorHelper(formik, 'description')}\r\n                            />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <TextField\r\n                                style={{width: '100%'}}\r\n                                name='price'\r\n                                label='Enter price'\r\n                                variant='outlined'\r\n                                {...formik.getFieldProps('price')}\r\n                                {...errorHelper(formik, 'price')}\r\n                            />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <TextField\r\n                                style={{width: '100%'}}\r\n                                name='available'\r\n                                label='Enter avilable guitars'\r\n                                variant='outlined'\r\n                                {...formik.getFieldProps('available')}\r\n                                {...errorHelper(formik, 'available')}\r\n                            />\r\n                        </div>\r\n                        <Divider className='mt-3 mb-3' />\r\n                        <div className='form-group'>\r\n                            <FormControl variant=\"outlined\">\r\n                                <InputLabel id=\"shipping-select-label\">Free shipping</InputLabel>\r\n                                <Select\r\n                                    labelId='shipping-select-label'\r\n                                    label='Free shipping'\r\n                                    name='shipping'\r\n                                    {...formik.getFieldProps('shipping')}\r\n                                    error={ formik.errors.shipping && formik.touched.shipping ?\r\n                                    true : false }\r\n                                >\r\n                                    <MenuItem value={true}>Yes</MenuItem>\r\n                                    <MenuItem value={false}>No</MenuItem>\r\n                                </Select>\r\n                                { formik.errors.shipping && formik.touched.shipping ?\r\n                                    <FormHelperText error={true}>\r\n                                        {formik.error.shipping}\r\n                                    </FormHelperText>\r\n                                    : null\r\n                                }\r\n                            </FormControl>\r\n                            <Divider className='mt-3 mb-3' />\r\n                            <Button\r\n                                variant='contained'\r\n                                color='primary'\r\n                                type='submit'\r\n                            >\r\n                                Add Product\r\n                            </Button>\r\n                        </div>\r\n                    </form>\r\n                </>\r\n\r\n            }\r\n        </DashboardLayout>\r\n    )\r\n};\r\n\r\nexport default AddProduct;","C:\\React\\waves\\client\\src\\components\\dashboard\\admin\\products\\addedit\\formValues.js",[],[],"C:\\React\\waves\\client\\src\\store\\reducers\\brands.reducer.js",[],[],"C:\\React\\waves\\client\\src\\store\\actions\\brand.actions.js",[],[],"C:\\React\\waves\\client\\src\\components\\dashboard\\admin\\products\\addedit\\upload.js",[],[],"C:\\React\\waves\\client\\src\\components\\dashboard\\admin\\products\\addedit\\picViewer.js",[],[],"C:\\React\\waves\\client\\src\\components\\dashboard\\admin\\products\\addedit\\edit.js",["294","295"],[],"import React, { useEffect, useReducer, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { getTokenCookie } from 'utils/tools';\r\nimport PicUpload from './upload';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport DashboardLayout from 'components/hoc/dashboardLayout';\r\nimport { getAllBrands } from 'store/actions/brand.actions';\r\nimport { editProduct, getProductById } from 'store/actions/product.actions';\r\nimport PicViewer from './picViewer';\r\nimport { clearCurrentProduct } from 'store/actions';\r\n\r\nimport { useFormik } from 'formik';\r\nimport { errorHelper } from 'utils/tools';\r\nimport Loader from 'utils/loader';\r\nimport { \r\n    TextField,\r\n    Button,\r\n    Divider,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    FormControl,\r\n    FormHelperText\r\n} from '@mui/material';\r\n\r\nimport { validation, formValues, getValuesToEdit } from './formValues';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\nconst EditProduct = (props) => {\r\n    const [values, setValues] = useState(formValues);\r\n    const [loading, setLoading] = useState(false);\r\n    const products = useSelector(state => state.products);\r\n    const notifications = useSelector(state => state.notifications);\r\n    const brands = useSelector(state => state.brands);\r\n    const dispatch = useDispatch();\r\n    const params = useParams();\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: values,\r\n        validationSchema: validation,\r\n        onSubmit: (values) => {\r\n            handleSubmit(values);\r\n        }\r\n    });\r\n\r\n    const handleSubmit = (values) => {\r\n        setLoading(true);\r\n        dispatch(editProduct(values, params.id));\r\n    }\r\n\r\n    const handlePicValue = (pic) => {\r\n        const picArray = formik.values.images;\r\n        const picItem = {id: pic.public_id, url: pic.url};\r\n        picArray.push(picItem);\r\n        formik.setFieldValue('images', picArray);\r\n    }\r\n\r\n    const deletePic = async(picToDelete) => {\r\n        setLoading(true);\r\n        const picData = {public_id: picToDelete.id};\r\n        axios.post(`/api/products/uploadRemove`, picData, {\r\n            headers: {\r\n                'Authorization': `Bearer ${getTokenCookie()}`\r\n            }\r\n        }).then( response => {\r\n            const picArray = formik.values.images;\r\n            picArray.splice(picToDelete.index, 1);\r\n            formik.setFieldValue('images', picArray);\r\n        }).catch( error => {\r\n            alert(error)\r\n        }).finally(() => {\r\n            setLoading(false);\r\n        });\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        if(notifications) {\r\n            setLoading(false);\r\n        }\r\n    }, [notifications])\r\n\r\n    useEffect(() => {\r\n        \r\n        const productId = params.id;\r\n        dispatch(getAllBrands());\r\n        if(productId) {\r\n            dispatch(getProductById(productId));\r\n        }\r\n    }, [dispatch, params.id])\r\n\r\n    useEffect(() => {\r\n        if(products && products.byId) {\r\n            setValues(getValuesToEdit(products.byId));\r\n            setLoading(false);\r\n        } else {\r\n            setLoading(true);\r\n        }\r\n    }, [products])\r\n    \r\n    useEffect(() => {\r\n        return() => {\r\n            dispatch(clearCurrentProduct())\r\n        }\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <DashboardLayout title={products.byId ? `Edit product` : \"Add Product\"}>\r\n            { loading ?\r\n                <Loader />\r\n                :\r\n                <>\r\n                    <PicViewer \r\n                        formik={formik}\r\n                        deletePic={(index, id) => deletePic(index, id)}\r\n                    />\r\n                    <PicUpload \r\n                        picValue={(pic) => handlePicValue(pic)}\r\n                    />\r\n                    <form className='mt-3 article_form' onSubmit={formik.handleSubmit}>\r\n                        <div className='form-group'>\r\n                            <TextField\r\n                                style={{width: '100%'}}\r\n                                name='model'\r\n                                label='Enter a model'\r\n                                variant='outlined'\r\n                                {...formik.getFieldProps('model')}\r\n                                {...errorHelper(formik, 'model')}\r\n                            />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <TextField\r\n                                style={{width: '100%'}}\r\n                                name='frets'\r\n                                label='Amount of frets'\r\n                                variant='outlined'\r\n                                {...formik.getFieldProps('frets')}\r\n                                {...errorHelper(formik, 'frets')}\r\n                            />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <TextField\r\n                                style={{width: '100%'}}\r\n                                name='woodtype'\r\n                                label='Enter wood type'\r\n                                variant='outlined'\r\n                                {...formik.getFieldProps('woodtype')}\r\n                                {...errorHelper(formik, 'woodtype')}\r\n                            />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <FormControl>\r\n                                <InputLabel id=\"brand-select-label\">Select a brand</InputLabel>\r\n                                <Select\r\n                                    labelId='brand-select-label'\r\n                                    name='brand'\r\n                                    label='Select a brand'\r\n                                    {...formik.getFieldProps('brand')}\r\n                                    error={ formik.errors.brand && formik.touched.brand ?\r\n                                    true : false }\r\n                                >\r\n                                    <MenuItem value=\"\">\r\n                                        <em>None</em>\r\n                                    </MenuItem>\r\n                                    {brands && brands.all ?\r\n                                        brands.all.map((item) => (\r\n                                            <MenuItem key={item._id} value={item._id}>\r\n                                                {item.name}\r\n                                            </MenuItem>\r\n                                        ))\r\n                                        : null\r\n                                    }\r\n                                </Select>\r\n                                { formik.errors.brand && formik.touched.brand ?\r\n                                    <FormHelperText error={true}>\r\n                                        {formik.errors.brand}\r\n                                    </FormHelperText>\r\n                                    : null\r\n                                }\r\n                            </FormControl>\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <TextField\r\n                                style={{width: '100%'}}\r\n                                name='description'\r\n                                label='Enter description'\r\n                                variant='outlined'\r\n                                multiline\r\n                                rows={4}\r\n                                {...formik.getFieldProps('description')}\r\n                                {...errorHelper(formik, 'description')}\r\n                            />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <TextField\r\n                                style={{width: '100%'}}\r\n                                name='price'\r\n                                label='Enter price'\r\n                                variant='outlined'\r\n                                {...formik.getFieldProps('price')}\r\n                                {...errorHelper(formik, 'price')}\r\n                            />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <TextField\r\n                                style={{width: '100%'}}\r\n                                name='available'\r\n                                label='Enter avilable guitars'\r\n                                variant='outlined'\r\n                                {...formik.getFieldProps('available')}\r\n                                {...errorHelper(formik, 'available')}\r\n                            />\r\n                        </div>\r\n                        <Divider className='mt-3 mb-3' />\r\n                        <div className='form-group'>\r\n                            <FormControl variant=\"outlined\">\r\n                                <InputLabel id=\"shipping-select-label\">Free shipping</InputLabel>\r\n                                <Select\r\n                                    labelId='shipping-select-label'\r\n                                    label='Free shipping'\r\n                                    name='shipping'\r\n                                    {...formik.getFieldProps('shipping')}\r\n                                    error={ formik.errors.shipping && formik.touched.shipping ?\r\n                                    true : false }\r\n                                >\r\n                                    <MenuItem value={true}>Yes</MenuItem>\r\n                                    <MenuItem value={false}>No</MenuItem>\r\n                                </Select>\r\n                                { formik.errors.shipping && formik.touched.shipping ?\r\n                                    <FormHelperText error={true}>\r\n                                        {formik.error.shipping}\r\n                                    </FormHelperText>\r\n                                    : null\r\n                                }\r\n                            </FormControl>\r\n                            <Divider className='mt-3 mb-3' />\r\n                            <Button\r\n                                variant='contained'\r\n                                color='primary'\r\n                                type='submit'\r\n                            >\r\n                                { products.byId ? 'Edit Product' : 'Add Product' }\r\n                            </Button>\r\n                        </div>\r\n                    </form>\r\n                </>\r\n\r\n            }\r\n        </DashboardLayout>\r\n    )\r\n};\r\n\r\nexport default EditProduct;","C:\\React\\waves\\client\\src\\components\\shop\\index.js",[],[],"C:\\React\\waves\\client\\src\\utils\\paginateNav.js",[],[],"C:\\React\\waves\\client\\src\\components\\shop\\searchBar.js",[],[],"C:\\React\\waves\\client\\src\\components\\shop\\collapseCheckbox.js",[],[],"C:\\React\\waves\\client\\src\\components\\shop\\rangeSelect.js",[],[],"C:\\React\\waves\\client\\src\\components\\product\\index.js",["296"],[],"import React, { useEffect, useState  } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getProductById } from 'store/actions/product.actions';\r\nimport { clearCurrentProduct } from 'store/actions';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\nimport { Modal } from 'react-bootstrap';\r\nimport Slider from \"react-slick\";\r\n\r\nimport \"slick-carousel/slick/slick.css\"; \r\nimport \"slick-carousel/slick/slick-theme.css\";\r\n\r\nimport Loader from 'utils/loader';\r\nimport ProductInfo from './productInfo';\r\nimport { renderCardImage } from 'utils/tools';\r\n\r\nconst ProductDetail = () => {\r\n    const [modal, setModal] = useState(false);\r\n    const sliderSettings = {\r\n        dots: false,\r\n        infinite: true,\r\n        speed: 500,\r\n        slidesToShow: 1,\r\n        slidesToScroll: 1,\r\n        cssEase: \"linear\"\r\n    };\r\n\r\n    const products = useSelector(state => state.products);\r\n    const dispatch = useDispatch();\r\n    const params = useParams();\r\n\r\n    const handleClose = () => setModal(false);\r\n\r\n    const handleCarousel = () => {\r\n        if(products.byId.images.length > 0){\r\n            setModal(true);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(getProductById(params.id))\r\n    }, [dispatch, params.id]);\r\n\r\n    useEffect(() => {\r\n        return() => {\r\n            dispatch(clearCurrentProduct())\r\n        }\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className='page_container'>\r\n            <div className='page_top'>\r\n                <div className='container'>\r\n                    Product Detail\r\n                </div>\r\n            </div>\r\n            <div className='container'>\r\n                { products && products.byId ?\r\n                    <div className='product_detail_wrapper'>\r\n                        <div className='left'>\r\n                            <div>\r\n                                <img \r\n                                    alt={`Images for ${products.byId.model}`}\r\n                                    src={renderCardImage(products.byId.images)}\r\n                                    onClick={() => handleCarousel()}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className='right'>\r\n                            <ProductInfo \r\n                                detail={products.byId}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    <Loader />\r\n                }\r\n            </div>\r\n            <Modal show={modal} onHide={handleClose} dialogClassName=\"modal-90w\">\r\n                <Modal.Header closeButton></Modal.Header>\r\n                <Modal.Body>\r\n                    <Slider {...sliderSettings}>\r\n                        { products.byId && products.byId.images ?\r\n                                products.byId.images.map((item) => (\r\n                                    <div key={item} style={{margin: '0 auto'}}>\r\n                                        <div className='img-block'\r\n                                            style={{\r\n                                                background: `url(${item.url}) no-repeat`\r\n                                            }}></div>\r\n                                    </div>\r\n                                ))\r\n                            :\r\n                                null\r\n                        }\r\n                    </Slider>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProductDetail;","C:\\React\\waves\\client\\src\\components\\product\\productInfo.js",["297"],[],"import React, { useState } from 'react';\r\nimport { WavesButton } from 'utils/tools';\r\nimport AddToCartHandler from 'utils/cart/addToCartHandler';\r\nimport { userAddToCart } from 'store/actions/user.actions';\r\n\r\nimport { \r\n    LocalShipping,\r\n    DoneOutline,\r\n    SentimentDissatisfied\r\n} from '@mui/icons-material';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst ProductInfo = ({ detail }) => {\r\n    const user = useSelector(state => state.users);\r\n    const dispatch = useDispatch();\r\n    const [modal, setModal] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    const handleAddToCart = (item) => {\r\n        if(!user.auth) {\r\n            setModal(true);\r\n            setError('auth');\r\n            return false;\r\n        }\r\n        if(!user.data.verified) {\r\n            setModal(true);\r\n            setError('verify');\r\n            return false;\r\n        }\r\n        dispatch(userAddToCart(item));\r\n    };\r\n\r\n    const handleClose = () => setModal(false);\r\n\r\n    const showProdTags = (detail) => (\r\n        <div className='product_tags'>\r\n            <div className={`tag ${detail.shipping > 0 ? 'active' : ''}`}>\r\n                <LocalShipping />\r\n                <div className='tag_text'>\r\n                    { detail.shipping ?\r\n                        <div>Free shipping for US location</div>\r\n                        :\r\n                        <div>No free shipping for US location</div>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className={`tag ${detail.available > 0 ? 'active' : ''}`}>\r\n                <DoneOutline />\r\n                <div className='tag_text'>\r\n                    { detail.available > 0 ?\r\n                        <div>{detail.available} available</div>\r\n                        :\r\n                        <div>Sorry, product not available at the moment</div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    const showProdActions = (detail) => (\r\n        <div className='product_actions'>\r\n            <div className='price'>$ {detail.price}</div>\r\n            <div className='cart'>\r\n                <WavesButton \r\n                    type='add_to_cart_link'\r\n                    runAction={() => handleAddToCart(detail)}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    const showProdSpecs = (details) => (\r\n        <div className='product_specifications'>\r\n            <h4>Specifications:</h4>\r\n            <div>\r\n                <div className='item'>\r\n                    <strong>Frets:</strong> {detail.frets}\r\n                </div>\r\n                <div className='item'>\r\n                    <strong>Wood: </strong> {detail.woodtype}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <h1>{detail.brand.name} {detail.model}</h1>\r\n            <p>{detail.description}</p>\r\n            { showProdTags(detail) }\r\n            { showProdActions(detail) }\r\n            { showProdSpecs(detail) }\r\n            <AddToCartHandler \r\n                modal={modal}\r\n                errorType={error}\r\n                handleClose={handleClose}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductInfo;","C:\\React\\waves\\client\\src\\utils\\cart\\addToCartHandler.js",[],[],"C:\\React\\waves\\client\\src\\components\\dashboard\\user\\cart.js",[],[],"C:\\React\\waves\\client\\src\\components\\dashboard\\user\\cartDetail.js",[],[],"C:\\React\\waves\\client\\src\\utils\\historyBlock.js",[],[],"C:\\React\\waves\\client\\src\\store\\reducers\\site.reducer.js",[],[],"C:\\React\\waves\\client\\src\\components\\dashboard\\admin\\site\\index.js",[],[],"C:\\React\\waves\\client\\src\\components\\dashboard\\admin\\site\\siteVars.js",[],[],"C:\\React\\waves\\client\\src\\store\\actions\\site.actions.js",[],[],{"ruleId":"298","replacedBy":"299"},{"ruleId":"300","replacedBy":"301"},{"ruleId":"302","severity":1,"message":"303","line":4,"column":25,"nodeType":"304","messageId":"305","endLine":4,"endColumn":42},{"ruleId":"302","severity":1,"message":"306","line":4,"column":44,"nodeType":"304","messageId":"305","endLine":4,"endColumn":58},{"ruleId":"302","severity":1,"message":"307","line":50,"column":19,"nodeType":"304","messageId":"305","endLine":50,"endColumn":27},{"ruleId":"302","severity":1,"message":"308","line":84,"column":19,"nodeType":"304","messageId":"305","endLine":84,"endColumn":26},{"ruleId":"302","severity":1,"message":"309","line":19,"column":8,"nodeType":"304","messageId":"305","endLine":19,"endColumn":20},{"ruleId":"310","severity":1,"message":"311","line":80,"column":8,"nodeType":"312","endLine":80,"endColumn":33,"suggestions":"313"},{"ruleId":"302","severity":1,"message":"314","line":1,"column":28,"nodeType":"304","messageId":"305","endLine":1,"endColumn":38},{"ruleId":"302","severity":1,"message":"314","line":1,"column":28,"nodeType":"304","messageId":"305","endLine":1,"endColumn":38},{"ruleId":"302","severity":1,"message":"315","line":27,"column":10,"nodeType":"304","messageId":"305","endLine":27,"endColumn":21},{"ruleId":"302","severity":1,"message":"315","line":6,"column":10,"nodeType":"304","messageId":"305","endLine":6,"endColumn":21},{"ruleId":"302","severity":1,"message":"316","line":9,"column":5,"nodeType":"304","messageId":"305","endLine":9,"endColumn":26},"no-native-reassign",["317"],"no-negated-in-lhs",["318"],"no-unused-vars","'removeTokenCookie' is defined but never used.","Identifier","unusedVar","'getTokenCookie' is defined but never used.","'products' is assigned a value but never used.","'product' is assigned a value but never used.","'usersReducer' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'searchValues'. Either include it or remove the dependency array.","ArrayExpression",["319"],"'useReducer' is defined but never used.","'useNavigate' is defined but never used.","'SentimentDissatisfied' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"320","fix":"321"},"Update the dependencies array to be: [notifications, dispatch, searchValues]",{"range":"322","text":"323"},[2443,2468],"[notifications, dispatch, searchValues]"]